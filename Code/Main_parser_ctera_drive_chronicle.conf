filter {

    # initialize variables
      mutate {
        replace => {
          "event.idm.read_only_udm.metadata.product_name" => "CTERA_DRIVE"
          "event.idm.read_only_udm.metadata.vendor_name" => "CTERA_DRIVE"
          "event.idm.read_only_udm.metadata.event_type" => "SYSTEM_AUDIT_LOG_UNCATEGORIZED"
          "not_valid_log" => "false"
          "hostname" => ""
          "pid" => ""
          "backupFileStatus" => ""
          "direction" => ""
          "folderID" => ""
          "folderName" => ""
          "filename" => ""
          "path" => ""
          "startTime" => ""
          "endTime" => ""
          "resultCode" => ""
          "totalBlocks" => ""
          "transferedBlocks" => ""
          "totalSize" => ""
          "transferedSize" => ""
          "folderOwner" => ""
          "loglevel" => ""
          "program" => ""
          "action1" => ""
          "resultMsg" => ""
          "facility" => ""
          "user" => ""
          "client_addr" => ""
          "action2" => ""
          "protocol" => ""
          "code" => ""
        }
      }
    
# Extract fields from the raw log (All the possible patterns must be there and separated by commas).
      grok {
        match => {
          "message" => [
            "<%{NUMBER:id}>%{MONTH:month} %{NUMBER:day} %{TIME:time} %{SYSLOGHOST:hostname} %{NUMBER:pid}:%{WORD:loglevel}:%{DATA:program}:::%{GREEDYDATA:action1} backupFileStatus:%{WORD:backupFileStatus} direction:%{WORD:direction} folderID:%{NUMBER:folderID} folderName:%{DATA:folderName} filename:%{DATA:filename} path:%{GREEDYDATA:path} startTime:%{TIMESTAMP_ISO8601:startTime} endTime:%{TIMESTAMP_ISO8601:endTime} resultCode:%{WORD:resultCode} totalBlocks:%{NUMBER:totalBlocks} transferedBlocks:%{NUMBER:transferedBlocks} totalSize:%{NUMBER:totalSize} transferedSize:%{NUMBER:transferedSize} folderOwner:%{GREEDYDATA:folderOwner}","<%{NUMBER:id}>%{MONTH:month} %{NUMBER:day} %{TIME:time} %{SYSLOGHOST:hostname} %{NUMBER:pid}:%{WORD:loglevel}:%{DATA:program}:::%{GREEDYDATA:action1} backupFileStatus:%{WORD:backupFileStatus} direction:%{WORD:direction} folderID:%{NUMBER:folderID} folderName:%{DATA:folderName} filename:%{DATA:filename} path:%{GREEDYDATA:path} startTime:%{TIMESTAMP_ISO8601:startTime} endTime:%{TIMESTAMP_ISO8601:endTime} resultCode:%{WORD:resultCode} resultMsg:%{DATA:resultMsg} totalBlocks:%{NUMBER:totalBlocks} transferedBlocks:%{NUMBER:transferedBlocks} totalSize:%{NUMBER:totalSize} transferedSize:%{NUMBER:transferedSize} folderOwner:%{GREEDYDATA:folderOwner}","<%{NUMBER:id}>%{MONTH:month} %{MONTHDAY:day} %{TIME:time} %{HOSTNAME:hostname} %{NUMBER:code}:%{LOGLEVEL:loglevel}:%{WORD:facility}:%{GREEDYDATA:user}::%{GREEDYDATA:action2} protocol:%{WORD:protocol} clientAddr:%{IP:client_addr}","<%{NUMBER:id}>%{MONTH:month} %{MONTHDAY:day} %{TIME:time} %{HOSTNAME:hostname} %{NUMBER:code}:%{LOGLEVEL:loglevel}:%{WORD:facility}:::%{GREEDYDATA:action2}"
          ]
        }
        overwrite => ["id","month","day","time","hostname","facility","user","action2","protocol","client_addr","code","pid","loglevel","program","action1","backupFileStatus","direction","folderID","folderName","filename","path","startTime","endTime","resultCode","resultMsg","totalBlocks","transferedBlocks","totalSize","transferedSize","folderOwner"]
        on_error => "not_valid_log"
      }
    

# Set event type   
    if [resultCode] != "" {
      mutate {
        replace => {
          "event.idm.read_only_udm.metadata.event_type" => "FILE_SYNC"
          "event_type_set" => "true"
        }
      }
      }
    if [protocol] != "" 
    {
        mutate {
        replace => {
          "event.idm.read_only_udm.metadata.event_type" => "USER_LOGOUT"
          "event_type_set" => "true"
        }
      }
}

    if [hostname] != "" 
    {
        mutate {
        replace => {
          "event.idm.read_only_udm.principal.user.userid" => "%{hostname}"
        }
      }
}
    

    
# Rename field 
      mutate {
        rename => {
          "resultCode" => "action"
        }
      }
    
# Manage action
if[action] != "" {
    if ([action] == "PermanentError") {
          mutate {
            replace => {
              "action" => "BLOCK"
            }
          }
       } else if ([action] == "Ok") {
         mutate {
            replace => {
              "action" => "ALLOW"
            }
         }
       } else {
          mutate {
            replace => {
              "action" => "UNKNOWN_ACTION" }
          }
       }
 }   
    
    
# Manage direction
if[direction] != "" {
    if ([direction] == "In") {
          mutate {
            replace => {
              "direction" => "INBOUND"
            }
          }
       } else if ([direction] == "Out") {
         mutate {
            replace => {
              "direction" => "OUTBOUND"
            }
         }
       }else if ([direction] == "Broad") {
         mutate {
            replace => {
              "direction" => "BROADCAST"
            }
         } 
        } 
       else {
          mutate {
            replace => {
              "direction" => "UNKNOWN_DIRECTION" }
          }
       }
    
 }      
       
# Manage loglevel
if[loglevel] != "" {
    if ([loglevel] == "emergency" or [loglevel] == "alert" or [loglevel] == "critical") {
          mutate {
            replace => {
              "loglevel" => "CRITICAL"
            }
          }
       } else if ([loglevel] == "error") {
         mutate {
            replace => {
              "loglevel" => "ERROR"
            }
         }
       }else if ([loglevel] == "critical" or [loglevel] == "high") {
         mutate {
            replace => {
              "loglevel" => "HIGH"
            }
         } 
        } 
        else if ([loglevel] == "info") {
         mutate {
            replace => {
              "loglevel" => "INFORMATIONAL"
            }
         } 
        }
        else if ([loglevel] == "notice" or [loglevel] == "low") {
         mutate {
            replace => {
              "loglevel" => "LOW"
            }
         } 
        }
        else if ([loglevel] == "warning" or [loglevel] == "medium") {
         mutate {
            replace => {
              "loglevel" => "MEDIUM"
            }
         } 
        }
        else if ([loglevel] == "debug" or [loglevel] == "none") {
         mutate {
            replace => {
              "loglevel" => "NONE"
            }
         } 
        }
       else {
          mutate {
            replace => {
              "loglevel" => "UNKNOWN_SEVERITY" }
          }
       }
}
     
     
# Rename fields
    if [hostname] != "" {
     mutate {
      rename => {
        "hostname" => "event.idm.read_only_udm.principal.hostname"
      }
    }
    }

    if [user] != "" { 
       mutate {
          rename => {
              "user" => "event.idm.read_only_udm.target.user.userid"
          }
       }
       }
        if [protocol] != "" {
       mutate {
          rename => {
              "protocol" => "event.idm.read_only_udm.extensions.auth.auth_details"
          }
       }
       }

     if [action2] != "" {
     mutate {
      rename => {
        "action2" => "event.idm.read_only_udm.metadata.description"
      }
    }
    }
     if [code] != "" {
     mutate {
      rename => {
        "code" => "event.idm.read_only_udm.metadata.product_log_id"
      }
    }
    }

 
# Merge 
      if [filename] != "" {
       mutate {
          merge => {
            "event.idm.read_only_udm.target.file.names" => "filename"
          }
       }
    }
    
    
       if [program] != "" {
        mutate {
          rename => {
            "program" => "event.idm.read_only_udm.metadata.product_event_type"
            "program_set" => "true"
       }
     }
   }
    
    

# Convert type
   if [totalSize] != "" {
   mutate {
     convert => {
       "totalSize" => "uinteger"
       }
     }
     }
      if [transferedBlocks] != ""{
   mutate {
     convert => {
       "transferedBlocks" => "integer"
       }
     }
     }
      if [transferedSize] != ""{
   mutate {
     convert => {
       "transferedSize" => "uinteger"
       }
     }
     }
   
# Rename
   if [transferedSize] != "" {
        mutate {
          rename => {
            "transferedSize" => "event.idm.read_only_udm.network.sent_bytes"
       }
     }
   }


   if [transferedBlocks] != "" {
    mutate {
      rename => {
        "transferedBlocks" => "event.idm.read_only_udm.network.sent_packets"
   }
 }
}

# Mapping client_addr -> ip it's an array but principal not
 if [client_addr] != "" {
            mutate {
                merge => {
                  "principal.ip" => "client_addr"
      }
    }
}
    mutate {
      rename => {
        "principal.ip" => "event.idm.read_only_udm.principal.ip"
      }
    }

# Mapping security_result (array) 
   if [backupFileStatus] != "" {
   mutate {
      rename => {
        "backupFileStatus" => "security_result.action_details"
      }
   }
   }

 if [loglevel] != "" {
   mutate {
      rename => {
        "loglevel" => "security_result.severity"
      }
   }
   }

# Merge needed because action it's an array
 if [action] != "" {
       mutate {
          merge => {
            "security_result.action" => "action"
          }
       }
       }
# Merge all into security_result
    mutate {
      merge => {
        "event.idm.read_only_udm.security_result" => "security_result"
      }
    }




# Mapping about and array 

    # Rename
    if [pid] != "" {
     mutate {
        rename => {
          "pid" => "about.process.pid"
        }
     }
     }
     if [filename] != "" {
     mutate {
        rename => {
          "filename" => "about.resource.name"
        }
     }
     }
     if [totalSize] != "" {
     mutate {
        rename => {
          "totalSize" => "about.file.size"
        }
     }
     }
     if [path] != "" {
      mutate {
        rename => {
          "path" => "about.file.full_path"
        }
     }
     }
  
  
   if [startTime] != ""{
      mutate {
        merge => {
          "event.idm.read_only_udm.about" => "about"
        }
      }
      }




# Additional fields mapping
if [folderID] != "" {
  mutate {
    replace => {
      "additional_folderID.key" => "folderID"
      "additional_folderID.value.string_value" => "%{folderID}"
    }
    on_error => "err_folderID_missing"
  }

    if ![err_folderID_missing] {
    mutate {
      merge => {
        "event.idm.read_only_udm.additional.fields" => "additional_folderID"
      }
      on_error => "err_folderID_field_missing"
    }
  }
}


if [folderName] != "" {
  mutate {
    replace => {
      "additional_folderName.key" => "folderName"
      "additional_folderName.value.string_value" => "%{folderName}"
    }
    on_error => "err_folderName_missing"
  }

    if ![err_folderName_missing] {
    mutate {
      merge => {
        "event.idm.read_only_udm.additional.fields" => "additional_folderName"
      }
      on_error => "err_folderName_field_missing"
    }
  }
}

if [totalBlocks] != "" {
  mutate {
    replace => {
      "additional_totalBlocks.key" => "totalBlocks"
      "additional_totalBlocks.value.string_value" => "%{totalBlocks}"
    }
    on_error => "err_totalBlocks_missing"
  }

    if ![err_totalBlocks_missing] {
    mutate {
      merge => {
        "event.idm.read_only_udm.additional.fields" => "additional_totalBlocks"
      }
      on_error => "err_totalBlocks_field_missing"
    }
  }
}

if [folderOwner] != "" {
  mutate {
    replace => {
      "additional_folderOwner.key" => "folderOwner"
      "additional_folderOwner.value.string_value" => "%{folderOwner}"
    }
    on_error => "err_folderOwner_missing"
  }

    if ![err_folderOwner_missing] {
    mutate {
      merge => {
        "event.idm.read_only_udm.additional.fields" => "additional_folderOwner"
      }
      on_error => "err_folderOwner_field_missing"
    }
  }
}

if [id] != "" {
  mutate {
    replace => {
      "additional_priorityValue.key" => "priorityValue"
      "additional_priorityValue.value.string_value" => "%{id}"
    }
    on_error => "err_priorityValue_missing"
  }

    if ![err_priorityValue_missing] {
    mutate {
      merge => {
        "event.idm.read_only_udm.additional.fields" => "additional_priorityValue"
      }
      on_error => "err_priorityValue_field_missing"
    }
  }
}

if [facility] != "" {
  mutate {
    replace => {
      "additional_logType.key" => "logType"
      "additional_logType.value.string_value" => "%{facility}"
    }
    on_error => "err_logType_missing"
  }

    if ![err_logType_missing] {
    mutate {
      merge => {
        "event.idm.read_only_udm.additional.fields" => "additional_logType"
      }
      on_error => "err_logType_field_missing"
    }
  }
}


if [time] != "" {
  mutate {
    replace => {
      "additional_start_time.key" => "start_time"
      "additional_start_time.value.string_value" => "%{time}"
    }
    on_error => "err_start_time_missing"
  }

    if ![err_start_time_missing] {
    mutate {
      merge => {
        "event.idm.read_only_udm.additional.fields" => "additional_start_time"
      }
      on_error => "err_start_time_field_missing"
    }
  }
}



    
# Final phase -> save event to the output
    mutate {
        merge => {
          "@output" => "event"
        }
      }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    